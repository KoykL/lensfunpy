os: Visual Studio 2015

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

    PYPI_USER: letmaik

  matrix:
    # Note: numpy binary wheels for Windows are only available from 1.10.4 onwards.
    # That is why this script uses Conda instead.
    - PYTHON: C:\Miniconda
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "32"
      NUMPY_VERSION: "1.7"

    - PYTHON: C:\Miniconda-x64
      PYTHON_VERSION: "2.7"
      PYTHON_ARCH: "64"
      NUMPY_VERSION: "1.7"

    - PYTHON: C:\Miniconda34
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "32"
      NUMPY_VERSION: "1.8"

    - PYTHON: C:\Miniconda34-x64
      PYTHON_VERSION: "3.4"
      PYTHON_ARCH: "64"
      NUMPY_VERSION: "1.8"
      
    - PYTHON: C:\Miniconda35
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "32"
      NUMPY_VERSION: "1.9"

    - PYTHON: C:\Miniconda35-x64
      PYTHON_VERSION: "3.5"
      PYTHON_ARCH: "64"
      NUMPY_VERSION: "1.9"

    - PYTHON: C:\Miniconda36
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "32"
      NUMPY_VERSION: "1.11"

    - PYTHON: C:\Miniconda36-x64
      PYTHON_VERSION: "3.6"
      PYTHON_ARCH: "64"
      NUMPY_VERSION: "1.11"

    - PYTHON: C:\Miniconda37
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "32"
      NUMPY_VERSION: "1.14"

    - PYTHON: C:\Miniconda37-x64
      PYTHON_VERSION: "3.7"
      PYTHON_ARCH: "64"
      NUMPY_VERSION: "1.14"

install:
  - ECHO "Powershell version:"
  - ps: "$PSVersionTable.PSVersion.Major"

  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
  
  # create conda environment
  - "conda create --yes --name pyenv python=%PYTHON_VERSION%"
  - "activate pyenv"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # we use conda to prevent compiling numpy, scipy, and cython
  - "conda install --yes numpy=%NUMPY_VERSION% cython scipy"
  - "pip install -r dev-requirements.txt"
  
  # force nose reinstall (not using possibly existing conda package)
  # see https://github.com/conda/conda/issues/1183
  - "pip install -U nose"
  
  # output what's installed
  - "pip freeze"
  
  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  #- "%CMD_IN_ENV% pip install -r dev-requirements.txt"
  
  # Build the compiled extension and install wheel.
  # -u disables output buffering which caused intermixing of lines
  #  when the external tools were started  
  - "%CMD_IN_ENV% python -u setup.py bdist_wheel"
  - ps: "ls dist/*.whl | % { pip install $_ }"
  
build: false  # Not a C# project, build stuff at the install step instead.

test_script:
  - mkdir tmp_for_test
  - cd tmp_for_test
  - nosetests --verbosity=3 --nocapture ../test
  - cd ..

deploy_script:
  - "powershell ./appveyor/pypi_deploy.ps1"
